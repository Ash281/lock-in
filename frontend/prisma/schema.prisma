// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// this is where prisma is used to communicate with the database 
// includes setting up models (events, users, preferences, etc.)

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// event source represents the origin of the event, which can be manual, AI-generated, or fixed

enum EventSource {
  manual // one off events created manually by the user
  ai // events created by AI suggestions
  commitment // fixed events that repeat on a schedule
  gcal // events imported from Google Calendar
}

model Event {
  id String @id @default(cuid())
  userId String
  // userId is a foreign key that links to the User model
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // describes a relation between Event and User
  // links userId value in Event to the id value in User
  title String
  start DateTime
  end DateTime
  locked Boolean @default(true) // movable by AI or not
  source EventSource @default(manual) // source of the event
  targetId String? // when targets get implemented e.g gym 5x a week
  metadata Json? // additional data for the event
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  focusSessions FocusSession[]

  @@index([userId]) // search events by userId
  @@index([userId, start]) // search events by user for specific time range
}

model User {
  id String @id // will be handled by clerk
  email String @unique
  name String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events Event[]
  commitments Commitment[]
  focusSessions FocusSession[]
  settings UserSettings?
}

model Commitment {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  title String
  rrule String? // recurrence rule for the commitment
  dayOfWeek Int? // day of the week (0 = Monday, 1 = Tuesday, etc.) if once a week
  startTime String // start time in HH:mm format (no fixed date, just same time)
  endTime String // end time in HH:mm format
  locked Boolean @default(true) // commitments shouldnt be moved by AI
  metadata Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId]) // search commitments by userId
}

model FocusSession {
  id String @id @default(cuid())
  userId String
  eventId String? // optional if focus session started without ongoing event
  title String
  start DateTime
  end DateTime?
  duration Int?
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event? @relation(fields: [eventId], references: [id], onDelete: SetNull)

  @@index([userId, start]) // search focus sessions by userId
}

model UserSettings {
  id String @id @default(cuid())
  userId String @unique
  tz String
  bufferMin Int @default(30) // buffer time between events planned by AI
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // search user settings by userId
}